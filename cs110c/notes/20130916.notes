<h1>Notes for September 16, 2013</h1>
<h4>Class Announcements</h4>
<ul>
	<li>Lab 2 (assigned today) due wed 10/7</li>
	<li>Exam 1 - Wed 9/25
		<p>You may bring 1 sheet of notes both sides (no restrictions)</p></li>
	<li>Review sheet next time</li>
	<li>Best way to prepare is do all practice problems</li>

</ul>

<h2>Efficiency Continued</h2>

<div class="figure">
	<img src="/~nmassenk/images/cs110c/figure9_1.jpg" width="682" height="493" />
	<p>Figure 9.1</p>
</div>

<p>If algorithm A requires time proportional to n<sup>2</sup>, then we say that algorithm A is O(n<sup>2</sup>). (Big O Notation)</p>
<p>Rules for Big O Math:
<ol>
	<li>You can ignore lower-order terms 
		<p>i.e. O(n<sup>2</sup> + 3n + 4) is also O(n<sup>2</sup>)</p>
		<p>O(1) &lt; O(log<sub>2</sub>n) &lt; O(n) &lt; O(nlog<sub>2</sub>n) &lt; O(n<sup>2</sup>) &lt; O(n<sup>3</sup>) &lt; O(2<sup>n</sup>) &lt; O(n!)</p></li>
	<li>You can ignore a multiplicative constant in a higher-order term
		<p>e.g. O(4n<sup>3</sup>) is also O(n<sup>3</sup>)</p></li>
</ol>
<p>Worst case vs Average case analysis</p>
<p>Practical considerations for use of Big O:</p>
<ol>
	<li>May not apply to small n</li>
	<li>One ADT implementation may be faster at some operations and slower at other operations compared to another ADT/implementation.  How often are the operations used?</li>
	<li>Some operations in some programs must respond within a critical time</li>
	<li>Remember to consdier algorithm's memory requirements</li>
	<li>Remember to consider algorithm's simplicity for small n and small gains in efficiency</li>
</ol>
<p><b>Summary:</b>Big O analysis is for large problem size.</p>

<h3>Big O Examples</h3>
<p>If we want to retrieve nth item in a list<p>
<ul>
	<li>Array-based list: O(1)</li>
	<li>Pointer-based list: O(n)</li>
</ul>
<p>Searching Algorithms:</p>
<ul>
	<li>Sequential Search: O(n)</li>
	<li>Binary Search: O(log<sub>2</sub>n) (must be sorted)</li>
</ul>

<p>Sorting Alogorithms:</p>
<ul>
	<li>Selection Sort, worst: O(n<sup>2</sup>) Average: O(n<sup>2</sup>)
		<p>Swap largest item with last item</p>
		<p>With remaining data, swap largest with last, keep repeating</p></li>
	<li>Bubble Sort, worst: O(n<sup>2</sup>) Average: O(<sup>2</sup>) Best: O(n)
		<p>For each pass of the data, order each pair of datums.  Eventually largest datum "bubbles" to the end.</p>
		<p>Must pass through n-1 times, or complete pass through with no exchanges</p>
		<p>Best case scenario is the data is sorted, and algorithms goes through data with no exchanges</p></li>
	<li>Mergesort (A recursive algorithm)
		<ol>
			<li>Sort 1st half of the array</li>
			<li>Sort 2nd half of the array</li>
			<li>Merge the 2 sorted halves</li>
		</ol>
		Rules:
		<ol>
			<li>While both subarrays are not processed, copy the smaller lead item into the temporary array</li>
			<li>Copy the rest of the elements from the subarray that has not been completely processed</li>
			<li>Copy the items from the temporary array back to the original array</li>
		</ol></li>
</ul>

