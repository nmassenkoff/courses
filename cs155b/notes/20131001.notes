<h1>Notes for October 1, 2013</h1>

<p>After installation create two databases and one virtual database:</p>
<ul>
	<li>mysql</li>
	<li>test</li>
	<li>Information_Schema (only in memory)</li>
</ul>

<h3>Information_Schema</h3>
<p>Provides metadata</p>
<p>Metadata is information about itself</p>

<p>schema = database, schemata = databases</p>

<p>Four types of information:</p>
<ol>
	<li>object catalog
	<p>Information About:</p>
	<ul>
		<li>databases</li>
		<li>tables</li>
		<li>views</li>
		<li>etc (objects)</li>
	</ul>
	<li>System Information</li>
	<p>Information about:
	<ul>
		<li>names of variables</li>
		<li>constants</li>
		<li>options</li>
	</ul>
	<li>Permissions</li>
	<li>Storage Engine Information</li>
	<p>MySQL comes with more than 20 different engines, default MyIsam</p>
</ol>

<p>Example:</p>
<pre>
	use information_schema;
	select table_name, engine, table_schema, table_type
	from table;

	select schema_name from schemata;

same as:
	show databases;


</pre>

<h4>Processlist</h4>
<p>A view that shows all the processes that are running</p>
<pre>
	select user, id from processlist;
</pre>

<p>Can also provide host, what database, what command user is using, time, ...</p>

<p>Can also type:</p>
<pre>
	show processlist;
</pre>

<h4>To kill process</h4>
<p>User very helpful program mysqladmin</p>

<pre>
	mysqladmin kill 50,52,57
</pre>
<p>Where 50, 52, 57 are process id</p>


<h2>Backup</h2>
<p>Logical and Physical</p>
<h3>Logical</h3>
<p>Save all the mysql commands that create the databases, all the insert statements that insert all of the data.</p>
<p>These are saved into file, just a bunch of sql commands.</p>
<p>When you run the file it runs the commands and restores all the databases</p>

<p>Created by using "dump"</p>

<h3>Physical</h3>
<p>Backing up the actual phyical files and directories that contain the mysql databases</p>

<p>Logical is portable, while physical is not.</p>
<p>Physical backup is much faster, especially when restoring.</p>

<h3>Full Backup</h3>
<p>Backup everything, all tables, databases, data, etc. Usually done weekly.</p>
<h3>Incremental</h3>
<p>Backing up only the changes since the previouse full backup. Usually run very often, ie 3 times a day.</p>

<h3>Backup Methods:</h3>
<ul>
	<li>cold</li>
		<p>Shutdown server, then backup</p>
	<li>hot</li>
		<p>Server is up and running, everything active during backup</p>
	<li>warm</li>
	<p>Locks all the tables, but doesn't shutdown</p>
</ul>

<h4>mysqldump</h4>
<p>Used to do a logical warm backup</p>

<p>Beginning lines say if your version is 4.1.1 set old_character_set_client to char_set_client:
<pre>
	/!40101 set @@OLD_CHARACTER_SET_CLIENT = @@CHAR_SET_CLIENT */;
</pre>
<p>Many lines like this help maximize compatibility between versions</p>

<p>Example of using mysqldump:</p>
<pre>
	mysql --user=root --password=[password] --all-databases &gt; dump.sql

	mysqldump mydb table1 table2 --skip-extended-insert
extended-insert:
	insert into emp (name, age) values ('john',23), ("Alex',25), ('sue', 18),...
</pre>
<p>Extended insert much faster but compatibility can be issue (use --skip-extended-insert for compatibility with older version that don't support this type of insert)</p>

<p>--lock-all-tables: locks all the tables for the whole time<br />
--nodata: dump only structure, not data that is in database<br />
--lock-tables: only lock tables currently dumping<br />
--where: i.e. --where 'name="John" and age&gt;60', should normally come with other options to specifiy database/table<br />
--databases good bad nice (backs up only good, bad, and nice)</p>

<p>Restoration:</p>
<pre>
	mysql &lt; dump.sql
</pre>

<h4>Backup single table</h4>
<pre>
	mysql&gt; select * into outfile 'abcd' from emp;
</pre>
<p>Creates binary file (abcd) not logical, and therefore not portable</p>
<p>To load into system:</p>
<pre>
	mysql&gt; load data infile 'abcd' into table emp;
</pre>

<p>In older version, had to make table first</p>

<p>If emp table already exists, load will remove table and all table and replace it</p>

<h4>Backup Command</h4>

<pre>
	mysql&gt; backup database mydb to 'xyz.sql'
</pre>
<p>Creates logical backup of database mydb</p>
<p>To restore:</p>
<pre>
	mysql&gt; restore from 'xyz.sql'
</pre>
<p>Save only into $DATADIR</p>
<p>After using backup and restore, will receive backup id and restore id</p>

<p>While using backup, two tables created automatically:</p>
<ul>
	<li>backup_history</li>
	<li>backup_progress</li>
</ul>

<p>Normally when backup is done, backup_progress will be removed (only exists while doing backup).</p>
<p>backup_history stays and stores all sorts of information about the backups (errors, user, host, etc)</p>
<p>Example:</p>
<pre>
	select * from backup_history where backup_id=450\G
</pre>

<p><b>Backup cannot be used to backup mysql</b> because during backup process mysql tables are constantly changing and cannot be locked</p>

<h4>mysqlhotcopy</h4>
<p>perl script that only works on:</p>
<ul>
	<li>MyISAM</li>
	<li>Archive</li>
</ul>
<p>Also only work on unix, linux and mac</p>

<pre>
	mysqlhotcopy mydb1 mydb2 /tmp
</pre>
<p>Must specify directory name (/tmp).  Will backup everything into directory</p>
<p>Advantage is that is a hotcopy, and server can keep running and no lock tables</p>

<h4>Sample Test Question</h4>
<p>How can you determine the engine type of a table, ie employee</p>
<p>Create a function to do this</p>

<pre>
	engine_name()
	{
		select engine from information_schema.table 
		where table_schema = '$1' and table_name = '$2;
	}
	
	engine_name mydb emp

</pre>

<h2>Add security check to script</h2>
<p>Code that prevents script from running if user running it does not have permission</p>

<pre>
	not_root()
	{
		# Returns true if your not root
		w=$(whoami)
		[ $w != "mysql" -a $w != "root" ] &amp;&amp; return 0 || return 1
	}

	#[ not_root ] &amp;&amp; echo "need to be root or mysql" &amp;&amp; exit 1

</pre>
