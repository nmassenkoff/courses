<h1>Notes for August 26, 2013</h1>

<h2>Practice problems</h2>
<h3>Problem 1:</h3>
<pre>
	computeChange(in dollarCost: integer, in centsCost:integer, inout d:integer, inout c:integer)
	// computes the change remaining from puchasing an item
	// costing dollarCost dollars and centsCost cents with d dollars//
	 and c cents
	 // Pre: dollarCost, centsCost, d and c are all non negative integers
	 // [ dollarCost 100 + centsCost &lt;= d * 100 + c ]
	 // c &lt; 100; centsCost &lt; 100 
	 // Post: d and c contain the computed remainder values in dollars and cents,
	 // respectively.

	 // If input value&lt; cost, the proper negative values for the amount 
	 // owed in d dollars and/or c cents is returned
	 // dollarsCost and centsCost are unchanged
</pre>

<h3>Problem 2:</h3>
<p>Make changes:</p>
<ul>
	<li>Tell user how to exit program</li>
	<li>Use strings; allow for names of different lengths</li>
	<li>Use more descriptive var names</li>
	<li>Prompt user</li>
	<li>Label and format output</li>
	<li>Make it easier for user to exit program</li>
	<li>Document program</li>
	<li>Organize program into functions</li>
	<li>Data validation</li>
</ul>

<h3>Problem 3:</h3>
<p>Result is 1 (returns 1)</p>
<p>Modify:</p>
<pre>
	int factorial (int n)
	{
		if (n &lt; 0) 
			fact = 0;
		else
		{
			for (int i = n; i &lt;; --i )
				fact = ij
		}
	}
</pre>

