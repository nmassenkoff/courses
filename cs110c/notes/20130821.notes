<h1>August 21, 2013</h1>

<h2>Supplement p.2.1</h2>
<p>Function calls are expensive, so recursive solutions tend to be more expensive, loops tend to be more efficient (while solving problem with function is most efficient</p>

<h3>Other Recursion examples</h3>
<h4>Blobs</h4>
<p><b>Blob</b> = set of connected, filled cells.  Used for i.e. robot going around room, mars, or document scanning, paint programs,etc</p>
<h5>Determine size of blob xy</h5>
<ol>
	<li>Make copy of grid (non-recursive)</li>
	<li>Determine base cases, return 0</li>
	<ul>
		<li>cell is not shaded</li>
		<li>cell is out of bounds</li>
	</ul>
	<li>If cell is filled then:</li>
	<li>Recursively query surrounding cells</li>
</ol>

<h5>Writing a string backward</h5>
<p>Uses void call</p>
<pre>
	writeBackword (in s: string)
	{
		//if s is empty is empty do nothing (base case)
		//else write the last char of s
		//then call writeBackword(s minus its last char) (recursive call)
	}
</pre>

<p>Draw box method to demistrate writeBackward</p>


