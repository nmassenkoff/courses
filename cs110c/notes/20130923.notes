<h1>Notes for September 23, 2013</h1>
<p>Beginning of class go over answers to in-class problems from last week</p>

<h2>Midterm Breakdown:</h2>


<p>17 multiple choice questions, 3pts each</p>
<ul>
	<li>5 question UML (fill in parts of UML)
	<li>Given a recursive func determine num of boxes is box trace, or determine the output, 4 questions total</li>
	<li>Determine effect of list operations on list object (1 question)</li>
	<li>Determine results of code that uses a list class</li>
	<li>Determine results of calls to polynomial, know list class uml, don't need to know polynomial uml (2 questions)</li>
	<p>Following 1 question each:</p>
	<li>Given a function determine the Big O</li>
	<li>Determine order of items for selections sort at end of a given pass</li>
	<li>Determine order of a bubble sort at the end of a given pass</li>
	<li>Determine the number of passes for buble sort</li>
</ul>

<p>Written questions (49 points):</p>
<ul>
	<li>Write a recursive function</li>
	<li>Write an exception class, then modify a function to throw an exception</li>
	<li>Write a function that operates on list objects that is independant of list implementation</li>
	<li>Trace a quick sort</li>
</ul>


<h2>Chapter 4, Linked List</h2>

<pre>
	typedef int ItemType;
	struct Node
	{
		Itemtype item;
		node * next;
	}
</pre>

<p>struct like class, default is public. Structs go back to c language.</p>

 <p>Allocate a new noe:</p>
 <pre>
 	node * p = new Node;
</pre>

 <pre>
	p&rarr;item  ...
	...
</pre>

<p>Empty list:</p>
<pre>
	Node *head = NULL;
</pre>

<p>Head is just a pointer.  Head node is the first node, different from head which is a pointer to head.</p>
<p><b>Do not do the following:</b></p>
<pre>
	Node *head;
	head = new Node;
	head = NULL;
</pre>
<p>Creates memory leak</p>

<p>Programmer's responsibility to prevent memory leaks.</p>

<h3>Displaying a list</h3>

<pre>
	void displayList(Node *head)
	{
		for (Node *cur = head, cur != NULL; cur = cur&rta;next)
			cout &lt;&lt; cur&rarr;item &lt;&lt; endl;
	}

	displayList(head);


